{"version":3,"sources":["Card.js","serviceWorker.js","robots.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","Boolean","window","location","hostname","match","robots","username","ReactDOM","render","src_Card","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc19ea34.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n  return (\n    <div className='tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt='robot' src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const robots = [\n  {\n    id: 10,\n    name: 'Donuld trump',\n    username: 'Bret',\n    email: 'donuld.trump@gmail.com'\n  },\n  {\n    id: 20,\n    name: 'Nurhadi',\n    username: 'dildojuga',\n    email: 'nurhadi@tronjol.tv'\n  },\n  {\n    id: 30,\n    name: 'Aldo',\n    username: 'dildo',\n    email: 'aldo@yesenia.net'\n  },\n  {\n    id: 40,\n    name: 'Ronaldowati',\n    username: 'wati',\n    email: 'ronaldo.wati@kory.org'\n  },\n  {\n    id: 50,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 60,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 70,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 80,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 90,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 100,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './Card';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { robots } from './robots';\n\nReactDOM.render(\n<div>\n<Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n<Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n<Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n<Card id={robots[3].id} name={robots[3].name} email={robots[3].email}/>\n<Card id={robots[4].id} name={robots[4].name} email={robots[4].email}/>\n<Card id={robots[5].id} name={robots[5].name} email={robots[5].email}/>\n<Card id={robots[6].id} name={robots[6].name} email={robots[6].email}/>\n<Card id={robots[7].id} name={robots[7].name} email={robots[7].email}/>\n<Card id={robots[8].id} name={robots[8].name} email={robots[8].email}/>\n<Card id={robots[9].id} name={robots[9].name} email={robots[9].email}/>\n</div>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}